from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Text, Command
from aiogram.types import ReplyKeyboardRemove
from aiogram import types
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from datetime import datetime

import config
import structure
import problems
import data_base
# –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã

BOT_TOKEN: str = config.token


bot: Bot = Bot(BOT_TOKEN)
dp: Dispatcher = Dispatcher()


#–ü—Ä–æ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∞–≤–∏—à

#last_chek: dict = {"last_in_list": 0,
#                   "last_show":{},
#                   "got_work":False,
 #                  "last_id": False}




statuses = [0, '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—Ä–∞–±–æ—Ç–Ω–∏–∫', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–¥–∏—Ä–µ–∫—Ç–æ—Ä']

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
@dp.message(Command(commands=['start']))
async def process_start_command(message: Message):
    id = message.from_user.id
    print(message.from_user.username, message.from_user.id)

    got_status = data_base.sql_fetch(id)

    if got_status != -1:   #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–∞–±–æ—Ç–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏
        # –¥–∞–ª–µ–µ –∏–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–∫ —Ä–∞–∑ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –µ–º—É —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ (—Å—Ç—Ä–æ–∫–∞ 50)

        await message.answer(f'–í–∞—à —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ - {statuses[got_status]}',
                        reply_markup=structure.main_keyboards[got_status])
    else:
        #–ù–ù –≤ —á–∞—Ç–µ –º–æ–ª—á–∞—Ç—å

        data_base.register(id, message.from_user.username)
        got_status = data_base.sql_fetch(id)
        #print(got_status)
        if got_status != -1:     
            await message.answer(f'–í–∞—à —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ - {statuses[got_status]}',
                        reply_markup=structure.main_keyboards[got_status])
            return
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –µ—Å–ª–∏ –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ', reply_markup=ReplyKeyboardRemove() )




@dp.message(Text(text='‚ùî –ü–æ–º–æ—â—å')) # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
async def process_help_command(message: Message):
    print(message.from_user.username, message.text)
    #–£ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ —Å–≤–æ–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π
    id = message.from_user.id
    got_status = data_base.sql_fetch(id)

    await message.answer(structure.help_answers[got_status], parse_mode= "Markdown")


@dp.message(Text(text='‚ùå –û—Ç–º–µ–Ω–∞')) # –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã
async def canseling(message: Message):
    print(message.from_user.username, message.text)
     # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã
    id = message.from_user.id
    data_base.rereport(id)
    
    if data_base.sql_fetch(id) == -1: return
    
    got_status = data_base.sql_fetch(id)

    await message.answer(text='–û—Ç–º–µ–Ω–µ–Ω–æ',
                         reply_markup=structure.main_keyboards[got_status]) 


@dp.message(Text(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')) # –ø–æ–∫–∞ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–¥–µ–ª–∞–Ω–∞, —Å–µ–π—á–∞—Å –æ–Ω–∞ –ª–∏—à—å –æ–±–Ω—É–ª—è–µ—Ç –∂–∞–ª–æ–±—É –∫–∞–∫ –∏ –æ—Ç–º–µ–Ω–∞
async def agree(message: Message):
    print(message.from_user.username, message.text)

    id = message.from_user.id
    if data_base.sql_fetch(id) == -1: return

    id = message.from_user.id
    got_status = data_base.sql_fetch(id)
    
    await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n–í—Å–∫–æ—Ä–µ –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞',
                         reply_markup=structure.main_keyboards[got_status]) 
    curtime = datetime.now()
    #print(curtime.hour)            
    #print(curtime.minute)
    data = {"progress":None,
            "beg_time":f'{str(curtime.hour)}:{str(curtime.minute)}',
            "start_time":[],
            "finish_time":[], 
            "author":f"{id}", 
            "fixer" : data_base.get_from_base(id, 'making_problem', 'fixer'), 
            "loc":data_base.get_from_base(id, 'making_problem','location') + ' ' + data_base.get_from_base(id, 'making_problem','dot'), 
            "message":data_base.get_from_base(id, 'making_problem','message')} 
    
    #print(data)
    if len(data["beg_time"].split(':')[1]) == 1:
        data["beg_time"] = data["beg_time"].split(':')[0] +':0' + data["beg_time"].split(':')[1]
    names= problems.get_names(id)
    problems.new_report(data)
    level = data_base.get_from_base(id, 'making_problem','level')
    if 4 <= level <= 6:
        for i in data_base.get_ids(2):
            if i[0] != message.from_user.id: 
                temp = data_base.get_from_base(id, 'making_problem', 'fixer')
                #print(temp)
                if temp == data_base.get_from_base(i[0], 'user_info', 'work') or temp == -1:
                    times = data["beg_time"].split(':')
                    if len(data["beg_time"].split(':')[1]) == 1:
                        times[1] = data["beg_time"].split(':')[0] +':0' + data["beg_time"].split(':')[1]
                    await bot.send_message(i[0], f'–í–Ω–∏–º–∞–Ω–∏–µ, –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞\n–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: {level} \n–¢—Ä–µ–±—É–µ—Ç—Å—è: {config.work_list[temp]}\n–ú–µ—Å—Ç–æ: {data["loc"]} \n–ö—Ä–∞—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data["message"]}\n\n@{names[0]} {names[1]}\n{times}') 
    elif 7 <= level <= 9:
        for i in data_base.get_ids(3):
            if i[0] != message.from_user.username:
                await bot.send_message(i[0], f'–í–Ω–∏–º–∞–Ω–∏–µ, –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞\n–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: {level} \n–¢—Ä–µ–±—É–µ—Ç—Å—è: {config.work_list[temp]}\n–ú–µ—Å—Ç–æ: {data["loc"]} \n–ö—Ä–∞—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data["message"]}\n\n@{names[0]} {names[1]}\n{data["beg_time"]}') 
    elif level == 10:
        for i in data_base.get_ids(4):
            if i != message.from_user.username:
                await bot.send_message(i[0], f'–í–Ω–∏–º–∞–Ω–∏–µ, –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞\n–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: {level} \n–¢—Ä–µ–±—É–µ—Ç—Å—è: {config.work_list[temp]}\n–ú–µ—Å—Ç–æ: {data["loc"]} \n–ö—Ä–∞—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data["message"]}\n\n@{names[0]} {names[1]}\n{data["beg_time"]}') 
    data_base.rereport(id)


@dp.message(Text(text='‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å'))
async def report(message: Message):
    print(message.from_user.username, message.text)
    id = message.from_user.id
    #print(data_base.sql_fetch(id))
    if data_base.sql_fetch(id) == -1: return
    await message.answer(text='–ß—å—è –∏–º–µ–Ω–Ω–æ –ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞?', # –Ω–∞—á–∞–ª–æ –µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                         reply_markup=structure.keyboard_whom)   #–í—ã–∑–æ–≤ –∫–ª–∞–≤–∏—à –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞

@dp.message(Text(text=['üñ•Ô∏è IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç','üßπ  –£–±–æ—Ä—â–∏–∫','üõ†Ô∏è –†–µ–º–æ–Ω—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä','üîç  –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'])) # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
async def set_fixer(message: Message):
    print(message.from_user.username, message.text)
    id = message.from_user.id
    if data_base.sql_fetch(id = id) == -1: return

    if data_base.get_from_base(id, 'making_problem', 'new_user') == 'True':
        temp = data_base.get_from_base(id, 'making_problem', 'message').split()
        data_base.new_user(temp[0][1:], f'{temp[1]} {temp[2]}', 2, config.work_list.index(message.text))
        await message.answer(text='–ù–æ–≤—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ', 
                             reply_markup=structure.main_keyboards[data_base.get_from_base(id, 'user_info', 'status')])
        data_base.rereport(id)
        return
    temp = config.work_list.index(message.text)
    if message.text == 'üîç  –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω':
        temp = -1
    data_base.edit_problem(id, 'fixer', temp)  # –ó–∞–ø–æ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ 
    
    await message.answer(text='–ù–∞ –∫–∞–∫–æ–π —ç—Ç–∞–∂ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç?',
                         reply_markup=structure.keyboard_floor) #–ö–ª–∞–≤–∏—à–∏ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–∂–∞
    
@dp.message(Text(text=['1Ô∏è‚É£ —ç—Ç–∞–∂', '2Ô∏è‚É£ —ç—Ç–∞–∂'])) # –®–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç - –≤—ã–±–æ—Ä —ç—Ç–∞–∂–∞
async def set_zone(message: Message):
    print(message.from_user.username, message.text)

    id = message.from_user.id
    if data_base.sql_fetch(id) == -1: return

    data_base.edit_problem(id, 'location', message.text) # –∑–∞–ø–∏—Å—å —ç—Ç–∞–∂–∞
    data_base.edit_problem(id, 'dot', "True") 

    await message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã', 
                         reply_markup=ReplyKeyboardRemove()) # —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à
    data_base.edit_problem(id, 'new_user', 'NULL')


@dp.message(Text(text=['üßë‚Äçüíª –°–æ—Ç—Ä—É–¥–Ω–∏–∫', 'üôã‚Äç‚ôÇÔ∏è –†–∞–±–æ—Ç–Ω–∏–∫'])) # –®–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç - –≤—ã–±–æ—Ä —ç—Ç–∞–∂–∞
async def set_new_status(message: Message):
    print(message.from_user.username, message.text)

    id = message.from_user.id
    if data_base.sql_fetch(id) < 3: return

    data_base.edit_problem(id, 'location', ['üßë‚Äçüíª –°–æ—Ç—Ä—É–¥–Ω–∏–∫', 'üôã‚Äç‚ôÇÔ∏è –†–∞–±–æ—Ç–Ω–∏–∫'].index(message.text)+1) # –∑–∞–ø–∏—Å—å —ç—Ç–∞–∂–∞
    if ['üßë‚Äçüíª –°–æ—Ç—Ä—É–¥–Ω–∏–∫', 'üôã‚Äç‚ôÇÔ∏è –†–∞–±–æ—Ç–Ω–∏–∫'].index(message.text)+1 == 1:
        temp = data_base.get_from_base(id, 'making_problem', 'message').split()
        data_base.new_user(temp[0][1:], f'{temp[1]} {temp[2]}', 1)
        await message.answer(text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ', 
                             reply_markup=structure.main_keyboards[data_base.get_from_base(id, 'user_info', 'status')])
        data_base.rereport(id)

        return
    await message.answer(text='–ö–∞–∫–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫?', 
                         reply_markup=structure.keyboard_whom_2) # —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à
    


@dp.message(Text(text='üóíÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã'))
async def reports(message: Message):
    print(message.from_user.username, message.text)
    id = message.from_user.id
    if data_base.sql_fetch(id) < 2: return
    
    work_keys = structure.keyboard_inline
    #print(data_base.get_from_base(id, "user_info", 'task'))

    if data_base.get_from_base(id, "user_info", 'task') != None and data_base.get_from_base(id, "user_info", 'task') != 0:
        work_keys=structure.keyboard_inline_in_work
    
    temp = problems.view_report(id)
    if temp[1] == -1:
        await message.answer(text=temp[0])
        return
    #print(temp)
    data_base.edit_task(id, 'text', temp[0])
    data_base.edit_task(id, 'last_check', temp[1])
    #await message.answer(text='–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–¥–∞—á—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "‚úÖ"') 
    await message.answer(text=temp[0],reply_markup=work_keys)


@dp.message(Text(text=['üïó –ú–æ—è —Ä–∞–±–æ—Ç–∞'])) # –®–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç - –≤—ã–±–æ—Ä —ç—Ç–∞–∂–∞
async def my_work(message: Message):
    print(message.from_user.username, message.text)
    id = message.from_user.id
    if data_base.sql_fetch(id) < 2: return
    #print(data_base.get_from_base(id, 'user_info', 'task'))
    problem = data_base.view_my_work(data_base.get_from_base(id, 'user_info', 'task'))
    #print(problem)
    if problem[1] == None:
        await message.answer(text=problem[0]) 
        return

    await message.answer(text=problem[0],reply_markup=structure.inline_my_work)

@dp.message(Text(text=['üë• –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞'])) # –®–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç - –≤—ã–±–æ—Ä —ç—Ç–∞–∂–∞
async def new_user(message: Message):
    print(message.from_user.username, message.text)
    id = message.from_user.id
    if data_base.sql_fetch(id) < 3: return
    data_base.rereport(id)

    await message.answer(text='''–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ —Ç—Ä–µ–±—É–¥—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    @—Ç–µ–≥_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –§–∞–º–∏–ª–∏—è –ò–º—è''', reply_markup=ReplyKeyboardRemove())
    data_base.edit_problem(id, 'new_user', 'True')

@dp.callback_query(Text(text=['next_page']))
async def next_page(callback: CallbackQuery):
    id = callback.from_user.id
    last_check = data_base.get_from_base(id, 'tasks_view', 'last_check')
    temp = problems.next_page(id, last_check)
    data_base.edit_task(id, 'last_check', temp[1])
    #print(last_check)

    #print(temp)
    if temp[1] == None:
        await callback.message.edit_text(text=temp[0])
        return
    #print(textt, last_chek['last_in_list'])
    if callback.message.text != temp[0]:
        await callback.message.edit_text(
            text=temp[0],
            reply_markup=callback.message.reply_markup)

    await callback.answer()

@dp.callback_query(Text(text=['previous_page']))
async def prev_page(callback: CallbackQuery):
    id = callback.from_user.id
    last_check = data_base.get_from_base(id, 'tasks_view', 'last_check')
    temp = problems.prev_page(id, last_check)
    data_base.edit_task(id, 'last_check', temp[1])
    #print(last_check)

    #print(temp)
    if temp[1] == None:
        await callback.message.edit_text(text=temp[0])
        return
    #print(textt, last_chek['last_in_list'])
    if callback.message.text != temp[0]:
        await callback.message.edit_text(
            text=temp[0],
            reply_markup=callback.message.reply_markup)

    await callback.answer()


@dp.callback_query(Text(text=['get_work']))
async def get_work(callback: CallbackQuery):
    id = callback.from_user.id

    temp = problems.get_work(data_base.get_from_base(id, 'tasks_view', 'last_check'))
    if temp == -1:
        await callback.message.edit_text(
            text=temp[0])
        data_base.edit_task(id, 'last_check', 0)
        data_base.edit_base(id, 'user_info', 'task', temp[1])

    else:
        await callback.message.edit_text(
            text=callback.message.text + "\n‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –ú–æ—è —Ä–∞–±–æ—Ç–∞")
        data_base.edit_base(id, 'user_info', 'task', temp)
    #data_base.edit_task(id, 'last_check', 0)

@dp.callback_query(Text(text=['complite_work']))
async def complite_work(callback: CallbackQuery):
    id = callback.from_user.id
    problem = data_base.get_from_base(id, 'user_info', 'task')
    data_base.complite_work(id, problem)
    await callback.message.edit_text(text="–ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π! \n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å")

@dp.callback_query(Text(text=['cansel_work']))
async def cansel_work(callback: CallbackQuery):
    id = callback.from_user.id
    problem = data_base.get_from_base(id, 'user_info', 'task')
    data_base.cansel_work(id, problem)
    await callback.message.edit_text(text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞–Ω–∏—è, –∂–∞–ª–æ–±–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø")


@dp.message()
async def text_message(message: Message): # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –∂–∞–ª–æ–±—É —Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –≤–≤–µ—Å—Ç–∏ —Å –∫–Ω–æ–ø–æ–∫,
    # –≤—Ä–æ–¥–µ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã
    print(message.from_user.username, message.text)
    id = message.from_user.id
    #print(data_base.get_from_base(id, 'making_problem', 'dot'))
    if message.text == '18362':
        try:
            data_base.new_user(message.from_user.username, '–ñ—é—Ä–∏ –ñ—é—Ä–∏', 2, 0)
            data_base.register(message.from_user.id, message.from_user.username)
            await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞, –≤–∞–º –ø—Ä–∏—Å–≤–æ–µ–º —Å—Ç–∞—Ç—É—Å: —Ä–∞–±–æ—Ç–Ω–∏–∫',
                        reply_markup=structure.main_keyboards[2])
        except:
            await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')




    elif data_base.get_from_base(id, 'making_problem', 'dot') == "True":
        data_base.edit_problem(id, 'dot', message.text) 

        await message.answer(text='–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∫—Ä–∞—Ç–∫–æ –∏ —ë–º–∫–æ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É ')
        data_base.edit_problem(id, 'message', "True")
            
    elif data_base.get_from_base(id, 'making_problem', 'message') == "True":

        data_base.edit_problem(id, 'message', message.text)
        data_base.edit_problem(id, 'level', "True")

        await message.answer(text="–ü—Ä–∏—Å–≤–æ–π—Ç–µ —Å–≤–æ–µ–π –∂–∞–ª–æ–±–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10\n–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—É–Ω–∫—Ç—É ‚ùî –ü–æ–º–æ—â—å")
    elif data_base.get_from_base(id, 'making_problem', 'new_user') == "True":
        try:
            message.text.split(3)
            data_base.edit_problem(id, 'message', message.text)
            await message.answer(text="–ü—Ä–∏—Å–≤–æ–π—Ç–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Ä–æ–≤–µ–Ω—å –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞", reply_markup=structure.keyboard_whom_1)
        except:
            await message.answer(text="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
        


    elif data_base.get_from_base(id, 'making_problem', 'level') == "True":
        try:
            if 1 <= int(message.text) <= 10:
                data_base.edit_problem(id, 'level', int(message.text))
                await message.answer(text=f"–¢—Ä–µ–±—É–µ—Ç—Å—è {config.work_list[ data_base.get_from_base(id, 'making_problem', 'fixer')]}\n"
                                f"–ú–µ—Å—Ç–æ: {data_base.get_from_base(id, 'making_problem', 'location')}, {data_base.get_from_base(id, 'making_problem', 'dot')}\n"
                                f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data_base.get_from_base(id, 'making_problem', 'message')}\n\n"
                                f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è?',
                            reply_markup=structure.keyboard_YN)

            else:
                await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10")
        except:
            await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10")
    else:
        tex = message.text.split('\n')[0]
        await message.answer(text = f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', reply_markup=structure.main_keyboards[data_base.get_from_base(id, 'user_info', 'status')])

if __name__ == '__main__':
    dp.run_polling(bot) # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞